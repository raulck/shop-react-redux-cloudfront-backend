{
  "version": 3,
  "sources": ["../../lib/lambda/documentation/getOpenApiJson.ts", "../../lib/lambda/openApi/openApi.ts"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from \"aws-lambda\";\r\nimport { openapi } from \"../openApi/openApi\";\r\n\r\nexport const handler = async (\r\n  _event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  return {\r\n    statusCode: 200,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\", // Allow all origins\r\n    },\r\n    body: JSON.stringify(openapi),\r\n  };\r\n};\r\n", "export const openapi = {\r\n  openapi: \"3.0.3\",\r\n  info: {\r\n    title: \"Product Service API\",\r\n    version: \"1.0.0\",\r\n    description: \"OpenAPI documentation for Product Service\",\r\n  },\r\n  servers: [{ url: \"/\" }],\r\n  paths: {\r\n    \"/products\": {\r\n      get: {\r\n        summary: \"Get all products\",\r\n        operationId: \"getProducts\",\r\n        responses: {\r\n          \"200\": {\r\n            description: \"List of products\",\r\n            content: {\r\n              \"application/json\": {\r\n                schema: {\r\n                  type: \"array\",\r\n                  items: { $ref: \"#/components/schemas/Product\" },\r\n                },\r\n              },\r\n            },\r\n          },\r\n          \"500\": { $ref: \"#/components/responses/InternalError\" },\r\n        },\r\n      },\r\n    },\r\n    \"/products/{productId}\": {\r\n      get: {\r\n        summary: \"Get product by ID\",\r\n        operationId: \"getProductById\",\r\n        parameters: [\r\n          {\r\n            name: \"productId\",\r\n            in: \"path\",\r\n            required: true,\r\n            schema: { type: \"string\" },\r\n          },\r\n        ],\r\n        responses: {\r\n          \"200\": {\r\n            description: \"Product found\",\r\n            content: {\r\n              \"application/json\": {\r\n                schema: { $ref: \"#/components/schemas/Product\" },\r\n              },\r\n            },\r\n          },\r\n          \"400\": { $ref: \"#/components/responses/BadRequest\" },\r\n          \"404\": { $ref: \"#/components/responses/NotFound\" },\r\n          \"500\": { $ref: \"#/components/responses/InternalError\" },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  components: {\r\n    schemas: {\r\n      Product: {\r\n        type: \"object\",\r\n        required: [\"id\", \"title\", \"price\", \"description\"],\r\n        properties: {\r\n          id: { type: \"string\", example: \"2\" },\r\n          price: { type: \"number\", example: 55999 },\r\n          title: { type: \"string\", example: \"Ford Mustang\" },\r\n          description: {\r\n            type: \"string\",\r\n            example:\r\n              \"An iconic American muscle car with powerful performance and a sleek design.\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responses: {\r\n      BadRequest: {\r\n        description: \"Bad request\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      NotFound: {\r\n        description: \"Product not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      InternalError: {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n} as const;\r\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAO,IAAMI,EAAU,CACrB,QAAS,QACT,KAAM,CACJ,MAAO,sBACP,QAAS,QACT,YAAa,2CACf,EACA,QAAS,CAAC,CAAE,IAAK,GAAI,CAAC,EACtB,MAAO,CACL,YAAa,CACX,IAAK,CACH,QAAS,mBACT,YAAa,cACb,UAAW,CACT,IAAO,CACL,YAAa,mBACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CACN,KAAM,QACN,MAAO,CAAE,KAAM,8BAA+B,CAChD,CACF,CACF,CACF,EACA,IAAO,CAAE,KAAM,sCAAuC,CACxD,CACF,CACF,EACA,wBAAyB,CACvB,IAAK,CACH,QAAS,oBACT,YAAa,iBACb,WAAY,CACV,CACE,KAAM,YACN,GAAI,OACJ,SAAU,GACV,OAAQ,CAAE,KAAM,QAAS,CAC3B,CACF,EACA,UAAW,CACT,IAAO,CACL,YAAa,gBACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CAAE,KAAM,8BAA+B,CACjD,CACF,CACF,EACA,IAAO,CAAE,KAAM,mCAAoC,EACnD,IAAO,CAAE,KAAM,iCAAkC,EACjD,IAAO,CAAE,KAAM,sCAAuC,CACxD,CACF,CACF,CACF,EACA,WAAY,CACV,QAAS,CACP,QAAS,CACP,KAAM,SACN,SAAU,CAAC,KAAM,QAAS,QAAS,aAAa,EAChD,WAAY,CACV,GAAI,CAAE,KAAM,SAAU,QAAS,GAAI,EACnC,MAAO,CAAE,KAAM,SAAU,QAAS,KAAM,EACxC,MAAO,CAAE,KAAM,SAAU,QAAS,cAAe,EACjD,YAAa,CACX,KAAM,SACN,QACE,6EACJ,CACF,CACF,CACF,EACA,UAAW,CACT,WAAY,CACV,YAAa,cACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CACN,KAAM,SACN,WAAY,CACV,QAAS,CAAE,KAAM,QAAS,CAC5B,CACF,CACF,CACF,CACF,EACA,SAAU,CACR,YAAa,oBACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CACN,KAAM,SACN,WAAY,CACV,QAAS,CAAE,KAAM,QAAS,CAC5B,CACF,CACF,CACF,CACF,EACA,cAAe,CACb,YAAa,wBACb,QAAS,CACP,mBAAoB,CAClB,OAAQ,CACN,KAAM,SACN,WAAY,CACV,QAAS,CAAE,KAAM,QAAS,CAC5B,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EDjHO,IAAMC,EAAU,MACrBC,IAEO,CACL,WAAY,IACZ,QAAS,CACP,eAAgB,mBAChB,8BAA+B,GACjC,EACA,KAAM,KAAK,UAAUC,CAAO,CAC9B",
  "names": ["getOpenApiJson_exports", "__export", "handler", "__toCommonJS", "openapi", "handler", "_event", "openapi"]
}
