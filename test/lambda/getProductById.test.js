"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getProductById_1 = require("../../lib/lambda/getProductById");
const products_1 = require("../../lib/lambda/mocks/products");
// import { mockProducts } from "../../lib/lambda/mocks/products";
const baseEvent = {
    body: null,
    headers: {},
    multiValueHeaders: {},
    httpMethod: "GET",
    isBase64Encoded: false,
    path: "/",
    pathParameters: null,
    queryStringParameters: null,
    multiValueQueryStringParameters: null,
    stageVariables: null,
    requestContext: {},
    resource: "/",
};
describe("Lambda handler GetProductByIdLambda", () => {
    it("should return 400 if productId is missing", async () => {
        const event = { ...baseEvent, pathParameters: null };
        const result = await (0, getProductById_1.handler)(event);
        expect(result.statusCode).toBe(400);
        expect(result.body).toBe(JSON.stringify({ message: "Missing path parameter: productId" }));
    });
    it("should return 404 if product is not found", async () => {
        const event = { ...baseEvent, pathParameters: { productId: "not-exist" } };
        const result = await (0, getProductById_1.handler)(event);
        expect(result.statusCode).toBe(404);
        expect(result.body).toBe(JSON.stringify({ message: "Product not found: not-exist" }));
    });
    it("should return 200 and the product if found", async () => {
        const product = products_1.mockProducts[0];
        const event = { ...baseEvent, pathParameters: { productId: product.id } };
        const result = await (0, getProductById_1.handler)(event);
        expect(result.statusCode).toBe(200);
        expect(result.body).toBe(JSON.stringify(product));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UHJvZHVjdEJ5SWQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldFByb2R1Y3RCeUlkLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvRUFBMEQ7QUFDMUQsOERBQStEO0FBQy9ELGtFQUFrRTtBQUVsRSxNQUFNLFNBQVMsR0FBRztJQUNoQixJQUFJLEVBQUUsSUFBSTtJQUNWLE9BQU8sRUFBRSxFQUFFO0lBQ1gsaUJBQWlCLEVBQUUsRUFBRTtJQUNyQixVQUFVLEVBQUUsS0FBSztJQUNqQixlQUFlLEVBQUUsS0FBSztJQUN0QixJQUFJLEVBQUUsR0FBRztJQUNULGNBQWMsRUFBRSxJQUFJO0lBQ3BCLHFCQUFxQixFQUFFLElBQUk7SUFDM0IsK0JBQStCLEVBQUUsSUFBSTtJQUNyQyxjQUFjLEVBQUUsSUFBSTtJQUNwQixjQUFjLEVBQUUsRUFBUztJQUN6QixRQUFRLEVBQUUsR0FBRztDQUNkLENBQUM7QUFFRixRQUFRLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0lBQ25ELEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN6RCxNQUFNLEtBQUssR0FBRyxFQUFFLEdBQUcsU0FBUyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUNyRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsd0JBQU8sRUFBQyxLQUFLLENBQUMsQ0FBQztRQUVwQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxDQUFDLENBQ2pFLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN6RCxNQUFNLEtBQUssR0FBRyxFQUFFLEdBQUcsU0FBUyxFQUFFLGNBQWMsRUFBRSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDO1FBQzNFLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSx3QkFBTyxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXBDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLENBQUMsQ0FDNUQsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFELE1BQU0sT0FBTyxHQUFHLHVCQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxLQUFLLEdBQUcsRUFBRSxHQUFHLFNBQVMsRUFBRSxjQUFjLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDMUUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLHdCQUFPLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFFcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYW5kbGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9sYW1iZGEvZ2V0UHJvZHVjdEJ5SWRcIjtcclxuaW1wb3J0IHsgbW9ja1Byb2R1Y3RzIH0gZnJvbSBcIi4uLy4uL2xpYi9sYW1iZGEvbW9ja3MvcHJvZHVjdHNcIjtcclxuLy8gaW1wb3J0IHsgbW9ja1Byb2R1Y3RzIH0gZnJvbSBcIi4uLy4uL2xpYi9sYW1iZGEvbW9ja3MvcHJvZHVjdHNcIjtcclxuXHJcbmNvbnN0IGJhc2VFdmVudCA9IHtcclxuICBib2R5OiBudWxsLFxyXG4gIGhlYWRlcnM6IHt9LFxyXG4gIG11bHRpVmFsdWVIZWFkZXJzOiB7fSxcclxuICBodHRwTWV0aG9kOiBcIkdFVFwiLFxyXG4gIGlzQmFzZTY0RW5jb2RlZDogZmFsc2UsXHJcbiAgcGF0aDogXCIvXCIsXHJcbiAgcGF0aFBhcmFtZXRlcnM6IG51bGwsXHJcbiAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiBudWxsLFxyXG4gIG11bHRpVmFsdWVRdWVyeVN0cmluZ1BhcmFtZXRlcnM6IG51bGwsXHJcbiAgc3RhZ2VWYXJpYWJsZXM6IG51bGwsXHJcbiAgcmVxdWVzdENvbnRleHQ6IHt9IGFzIGFueSxcclxuICByZXNvdXJjZTogXCIvXCIsXHJcbn07XHJcblxyXG5kZXNjcmliZShcIkxhbWJkYSBoYW5kbGVyIEdldFByb2R1Y3RCeUlkTGFtYmRhXCIsICgpID0+IHtcclxuICBpdChcInNob3VsZCByZXR1cm4gNDAwIGlmIHByb2R1Y3RJZCBpcyBtaXNzaW5nXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGV2ZW50ID0geyAuLi5iYXNlRXZlbnQsIHBhdGhQYXJhbWV0ZXJzOiBudWxsIH07XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBoYW5kbGVyKGV2ZW50KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LnN0YXR1c0NvZGUpLnRvQmUoNDAwKTtcclxuICAgIGV4cGVjdChyZXN1bHQuYm9keSkudG9CZShcclxuICAgICAgSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIk1pc3NpbmcgcGF0aCBwYXJhbWV0ZXI6IHByb2R1Y3RJZFwiIH0pXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICBpdChcInNob3VsZCByZXR1cm4gNDA0IGlmIHByb2R1Y3QgaXMgbm90IGZvdW5kXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGV2ZW50ID0geyAuLi5iYXNlRXZlbnQsIHBhdGhQYXJhbWV0ZXJzOiB7IHByb2R1Y3RJZDogXCJub3QtZXhpc3RcIiB9IH07XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBoYW5kbGVyKGV2ZW50KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LnN0YXR1c0NvZGUpLnRvQmUoNDA0KTtcclxuICAgIGV4cGVjdChyZXN1bHQuYm9keSkudG9CZShcclxuICAgICAgSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIlByb2R1Y3Qgbm90IGZvdW5kOiBub3QtZXhpc3RcIiB9KVxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJzaG91bGQgcmV0dXJuIDIwMCBhbmQgdGhlIHByb2R1Y3QgaWYgZm91bmRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgcHJvZHVjdCA9IG1vY2tQcm9kdWN0c1swXTtcclxuICAgIGNvbnN0IGV2ZW50ID0geyAuLi5iYXNlRXZlbnQsIHBhdGhQYXJhbWV0ZXJzOiB7IHByb2R1Y3RJZDogcHJvZHVjdC5pZCB9IH07XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBoYW5kbGVyKGV2ZW50KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcclxuICAgIGV4cGVjdChyZXN1bHQuYm9keSkudG9CZShKU09OLnN0cmluZ2lmeShwcm9kdWN0KSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=